# -*- coding: utf-8 -*-
"""Projext_Sem7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14lryjxJIKhSqXC_4cWMHeMNE4tgFf-Z9
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

df=pd.read_csv('/content/dataset.csv')

df.head()

df.isnull().sum()

df.shape

df.type.value_counts()

type=df['type'].value_counts()

transactions=type.index

quantity=type.values

import plotly.express as px
px.pie(df,values=quantity,names=transactions,hole=0.4,title="Distribution of Transaction Type")

df=df.dropna()

df

df['isFraud']=df['isFraud'].map({0:'No Fraud',1:'Fraud'})

df

df['type'].unique()

df['type'].value_counts()

df

df['type']=df['type'].map({'PAYMENT':1, 'TRANSFER':4, 'CASH_OUT':2, 'DEBIT':5, 'CASH_IN':3})

df['type'].value_counts()

df

df['type'].unique()

df['type'].value_counts()

x=df[['type','amount','oldbalanceOrg','newbalanceOrig']]

y=df.iloc[:,-2]

y

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.20,random_state=42)

from sklearn.tree import DecisionTreeClassifier

model=DecisionTreeClassifier()

model.fit(xtrain,ytrain)

model.score(xtest,ytest)

model.predict([[4,180,181,10]])

x

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

models=[]
results=[]
names=[]

models.append(('LR',LogisticRegression()))
models.append(('LDA',LinearDiscriminantAnalysis()))
models.append(('KNN',KNeighborsClassifier()))
models.append(('CART',DecisionTreeClassifier()))
models.append(('NB',GaussianNB()))
models.append(('SVM',SVC()))

models

from sklearn import model_selection
for name,model in models:
  kfold=model_selection.KFold(n_splits=10,random_state=7,shuffle=True)
  cv_results=model_selection.cross_val_score(model,x,y,cv=kfold,scoring='accuracy')
  results.append(cv_results)
  names.append(name)
  msg="%s: %f (%f)" %(name,cv_results.mean(),cv_results.std())
  print(msg)